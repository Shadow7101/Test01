// <auto-generated />
using App1.Data.MsSql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace App1.Data.MsSql.Migrations
{
    [DbContext(typeof(App1DbContext))]
    [Migration("20180106151943_Initialize_database")]
    partial class Initialize_database
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("App1.Domain.Entities.Gender", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnName("GenderId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("App1.Domain.Entities.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LogId")
                        .HasAnnotation("MySql:ValueGeneratedOnAdd", true);

                    b.Property<Guid?>("CreatedBy");

                    b.Property<string>("CreatedIp")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Data")
                        .HasMaxLength(300);

                    b.Property<byte>("LogTypeId");

                    b.HasKey("Id");

                    b.HasIndex("LogTypeId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("App1.Domain.Entities.LogType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnName("LogTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("LogTypes");
                });

            modelBuilder.Entity("App1.Domain.Entities.Role", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnName("RoleId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("App1.Domain.Entities.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TokenId");

                    b.Property<Guid>("CreatedBy");

                    b.Property<string>("CreatedIp")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("TokenData")
                        .HasColumnType("text");

                    b.Property<byte>("TypeId");

                    b.Property<int>("Validate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TypeId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("App1.Domain.Entities.TokenType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnName("TypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TokenTypes");
                });

            modelBuilder.Entity("App1.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId");

                    b.Property<decimal>("Avaliation")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("Banned");

                    b.Property<Guid?>("BannedBy");

                    b.Property<string>("BannedIp")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("BannedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Bloqued");

                    b.Property<Guid?>("BloquedBy");

                    b.Property<string>("BloquedIp")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("BloquedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedBy");

                    b.Property<string>("CreatedIp")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<string>("DeletedIp")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.Property<bool>("EmailValidaded");

                    b.Property<byte>("GenderId");

                    b.Property<DateTime?>("LastAccess")
                        .HasColumnType("datetime");

                    b.Property<string>("LastAccessIp")
                        .HasMaxLength(30);

                    b.Property<Guid?>("ModifyBy");

                    b.Property<string>("ModifyIp")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("ModifyOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("App1.Domain.Entities.Log", b =>
                {
                    b.HasOne("App1.Domain.Entities.LogType", "LogType")
                        .WithMany()
                        .HasForeignKey("LogTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("App1.Domain.Entities.Token", b =>
                {
                    b.HasOne("App1.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App1.Domain.Entities.TokenType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("App1.Domain.Entities.User", b =>
                {
                    b.HasOne("App1.Domain.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App1.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
